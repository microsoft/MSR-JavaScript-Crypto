export function consoleLog(text: string): void;
export function toBase64(data: ArrayBuffer | number[] | ArrayBufferView, base64Url?: boolean): string;
declare function base64ToBytes(encodedString: string): number[];
export function checkParam(param: any, type: string, errorMessage: string): boolean;
export function getObjectType(object: any): string;
export function bytesToHexString(bytes: number[], separate?: boolean): string;
export function bytesToInt32(bytes: number[], index?: number): number;
export function stringToBytes(text: string): number[];
export function bytesToString(textBytes: number[]): string;
export function unpackData(base64String: string, arraySize?: number, toUint32s?: boolean): (number | number[])[];
export function hexToBytesArray(hexString: string): number[];
export function int32ToBytes(int32: number): number[];
export function int32ArrayToBytes(int32Array: number[]): number[];
export function toArray(typedArray: ArrayBufferView | number[] | ArrayBuffer): number[];
export function arraysEqual(array1: number[], array2: number[]): boolean;
export function clone(object: any): any;
export function xorVectors(a: number[], b: number[], res?: number[]): number[];
export function padEnd(array: number[], value: number, finalLength: number): number[];
export function padFront(array: number, value: number, finalLength: number): number[];
export function getVector(length: number, fillValue?: number): number[];
export function error(name: string, message: string): void;
export function isBytes(array: number[]): boolean;
export function isInteger(value: any): boolean;
export function createProperty(parentObject: any, propertyName: string, initialValue: any, getterFunction: Function, setterFunction?: Function): void;
export { base64ToBytes as fromBase64 };
